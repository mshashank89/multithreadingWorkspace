package prodcons;

public class PrintAlternate {
	
	private static final int MAX = 10;
	private static Object _lock = new Object();

	public static void main(String[] args) throws InterruptedException {

		Thread even = new Thread(new Runnable() {

			@Override
			public void run() {
				try {
					printEven();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		});
		
		Thread odd = new Thread(new Runnable() {

			@Override
			public void run() {

				try {
					printOdd();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		});
		
		even.start();
		odd.start();
		
		even.join();
		odd.join();
		
		System.out.println("End");
	}

	private static void printEven() throws InterruptedException {
		
		for (int i=0;i<MAX;i+=2) {
			
			synchronized (_lock) {				
				System.out.println(Thread.currentThread().getName() + " " + i);
				
				Thread.sleep(100);
				
				_lock.notify();
				Thread.sleep(100000);
				_lock.wait();
			}
			
		}
	}
	
	private static void printOdd() throws InterruptedException {
		try {
			Thread.sleep(100);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		for (int i=1;i<MAX;i+=2) {
			synchronized (_lock) {				
				System.out.println(Thread.currentThread().getName() + " " + i);

				Thread.sleep(100);
				
				_lock.notify();
				_lock.wait();
			}
		}
	}
}
